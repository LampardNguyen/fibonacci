angular.module("starter", ["ionic", "jett.ionic.filter.bar", "ngAnimate", "ngCordova", "commonModule", "ngMessages", "commonDTA", "modelModule", "funcModule", "ngCookies", "pascalprecht.translate"]).run(["$ionicPlatform", function(e) {
    e.ready(function() {
        window.cordova && window.cordova.plugins.Keyboard && cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0), window.StatusBar && StatusBar.styleDefault(), Parse.initialize("t0L423J0yVlXAfjTp34NIjdd9v1XNRo8co9GVqdq", "R9hXsy0jnQJZ7u6Bgb9BrRamVxBIop2AjPu95vyt"), Parse.serverURL = "https://parseapi.back4app.com"
    })
}]), angular.module("starter").controller("mainCtrl", ["$rootScope", "$scope", "$commonModel", "$commonSql", "$DTA", "$ionicSideMenuDelegate", "$ionicPlatform", "$ionicPopup", "$cordovaToast", "$ionicModal", "$timeout", "$ionicPopover", "$cordovaLocalNotification", "$cordovaVibration", "$window", "$ionicScrollDelegate", "$ionicLoading", "$cordovaFile", "$commonFunc", "$tableName", "$translate", function($rootScope, $scope, $commonModel, $commonSql, $DTA, $ionicSideMenuDelegate, $ionicPlatform, $ionicPopup, $cordovaToast, $ionicModal, $timeout, $ionicPopover, $cordovaLocalNotification, $cordovaVibration, $window, $ionicScrollDelegate, $ionicLoading, $cordovaFile, $commonFunc, $tableName, $translate) {
    $scope.model = $commonModel, $scope.initModel = function() {
        $scope.model.languageDisplay = $translate.use(), $scope.model.loading = $ionicLoading, $scope.model.mainView = "#/main", $scope.model.view = "#/main", $scope.model.viewList = ["#/main"], $scope.model.classList = [], $scope.model.wordList = [], $scope.model.lessonList = [], $scope.model.lessonListOfClass = [], $scope.model.newWordList = [], $scope.model.newWordListTmp = [], $scope.model.words = [], $scope.model.classes = [], $scope.model.fibonacci = [], $scope.model.needExercisesCount = 0, $scope.model.doExercisesNeedList = [], $scope.model.maxCountLearn = 10, $scope.model.countWordsOfLesson = 5, $scope.model.rootDirectory = "file=///storage/emulated/0/", $scope.model.search = {}, $scope.model.languages = [{
            name: "English",
            value: "en-US",
            value2: "en",
            id: "0"
        }, {
            name: "Japanese",
            value: "ja-JP",
            value2: "ja",
            id: "1"
        }, {
            name: "Vietnamese",
            value: "vi-VN",
            value2: "vi",
            id: "2"
        }], $scope.model.languageItem = "0", $scope.model.languageLearn = "0"
    }, $scope.checkSyncData = function(e) {
        $commonFunc.checkIsOnline().then(function(o) {
            o != Parse.Error.CONNECTION_FAILED && ($scope.model.isOnline = !0, $DTA.selectTableAll(e, $tableName.Users).then(function(o) {
                _.each(o.rows, function(o) {
                    var n = Parse.Object.extend("_User"),
                        s = new Parse.Query(n);
                    s.get(o.idOnline, {
                        success: function(e) {},
                        error: function(n, s) {
                            s.code == Parse.Error.OBJECT_NOT_FOUND && 1 == o.isSync && ($commonModel.currentUser = angular.copy(o), $DTA.deleteTable($commonModel, $tableName.Users, {
                                idOffline: o.idOffline
                            }), $DTA.deleteTable($commonModel, $tableName.Configs, {}), $DTA.selectTableWhere(e, $tableName.Classes, {
                                uesrId: o.idOffline
                            }).then(function(e) {
                                _.each(e.rows, function(e) {
                                    $DTA.deleteTable($commonModel, $tableName.Classes, {
                                        idOffline: e.idOffline
                                    })
                                })
                            }, function(e) {}))
                        }
                    })
                })
            }, function(e) {}))
        })
    }, $scope.init = function() {
        $scope.initModel(), $scope.defineExitApp(), $commonSql.openDb().then(function(e) {
            $scope.model.db = e, $scope.createTableNeeded(e), $scope.checkSyncData(e), angular.isUndefined(localStorage.user) || "null" == localStorage.user ? $scope.showLogin() : $scope.loginSubmit(angular.fromJson(localStorage.user))
        }, function(e) {})
    }, $scope.saveLanguage = function() {
        var e = {
            name: "languageLearn",
            value: $scope.model.languageItem.toString(),
            deletedBy: "",
            isDeleted: "",
            createdBy: $scope.model.currentUser.isOnline
        };
        $DTA.insertDataToTable($scope.model.db, $tableName.Configs, e).then(function(e) {
            $scope.selectLanguageModal.hide(), console.log("save configs", e)
        }, function(e) {
            console.log("save config err", e)
        })
    }, $scope.showSelectLanguage = function() {
        $scope.selectLanguageModal ? $scope.selectLanguageModal.show() : $ionicModal.fromTemplateUrl("./templates/selectLanguage.html", function(e) {
            $scope.selectLanguageModal = e, $scope.selectLanguageModal.show()
        }, {
            scope: $scope,
            animation: "slide-in-up",
            backdropClickToClose: !1,
            hardwareBackButtonClose: !1
        })
    }, $scope.showLogin = function() {
        angular.isDefined($scope.sigupModal) && ($timeout(function() {
            $scope.model.username = null, $scope.model.password = null, $scope.model.confirmPassword = null, $scope.model.email = null, angular.isDefined($scope.sigupForm) && $scope.sigupForm.$setUntouched()
        }, 100), $scope.sigupModal.hide()), $scope.loginModal ? $scope.loginModal.show() : $ionicModal.fromTemplateUrl("./templates/login.html", function(e) {
            $scope.loginModal = e, $scope.loginModal.show()
        }, {
            scope: $scope,
            animation: "slide-in-up",
            focusFirstInput: !0,
            backdropClickToClose: !1,
            hardwareBackButtonClose: !1
        })
    }, $scope.loginLocal = function(e, o) {
        $DTA.selectTableWhere($scope.model.db, $tableName.Users, e).then(function(n) {
            0 == n.rows.length ? (angular.isUndefined($scope.showAlertLogin) && ($scope.showAlertLogin = function() {
                var e = $ionicPopup.alert({
                    title: "Login",
                    template: "Wrong username or password!"
                });
                e.then(function(e) {
                    $scope.showLogin()
                })
            }), $scope.showAlertLogin()) : (e = {
                username: o.username,
                password: o.password
            }, localStorage.user = angular.toJson(e), $scope.initModel(), $scope.model.currentUser = n.rows[0], $scope.loadDataFromDb($scope.model.db), angular.isDefined($scope.loginModal) && ($timeout(function() {
                $scope.model.username = null, $scope.model.password = null, angular.isDefined($scope.loginForm) && $scope.loginForm.$setUntouched()
            }, 100), $scope.loginModal.hide()), $commonFunc.setView("#/main"))
        }, function(e) {})
    }, $scope.syncUserToClient = function(e, o, n) {
        $scope.model.currentUser = {
            idOnline: o.id
        }, $DTA.selectTableWhere($scope.model.db, $tableName.Users, e).then(function(s) {
            if (s.rows.length > 0) {
                var t = s.rows[0],
                    c = new Date(t.updated).getTime(),
                    i = new Date(o.get("updatedAt").toString()).getTime();
                if (i > c) {
                    var a = {
                            username: o.get("username"),
                            password: e.password,
                            email: o.get("email"),
                            updated: o.get("updatedAt").toString()
                        },
                        l = {
                            idOnline: t.idOnline
                        };
                    $DTA.updateTableLocal($scope.model.db, $tableName.Users, a, l).then(function(e) {
                        (n || angular.noop)(e)
                    }, function(e) {})
                } else(n || angular.noop)(s)
            } else {
                var r = {
                    uid: o.get("uid"),
                    username: o.get("username"),
                    password: e.password,
                    email: o.get("email"),
                    isDeleted: o.get("isDeleted"),
                    deletedBy: o.get("deletedBy")
                };
                r.idOnline = o.id, r.isSync = !0, r.created = o.get("createdAt").toString(), r.updated = o.get("updatedAt").toString(), $scope.model.currentUser = {
                    idOnline: o.id
                }, $commonFunc.getNextIdOfTable($tableName.Users, function(e) {
                    r.idOffline = e, $scope.model.isSyncToServer = !1, $DTA.insertDataToTable($scope.model.db, $tableName.Users, r).then(function(e) {
                        (n || angular.noop)(e)
                    }, function(e) {})
                })
            }
        }, function(e) {})
    }, $scope.syncDataFromServerToClient = function(e, o) {
        console.log(o + " syncDataFromServerToClient", 1), $scope.model.totalProcessSync++, o = o, $DTA.getMaxColOfTable($scope.model.db, o, "updated", "DATE").then(function(n) {
            var s = Parse.Object.extend(o),
                t = new Parse.Query(s);
            if (null != n) {
                var c = new Date(n.updated).getTime();
                t.greaterThan("updatedAt", new Date(c))
            }
            o != $tableName.Fibonacci && t.equalTo("createdBy", e.id);
            var i = arguments.callee;
            i.uid || (i.uid = 0), ++i.uid, console.log(o + " getMaxColOfTable", i.uid), $scope.model.totalProcessSync++, t.count({
                success: function(e) {
                    var n = Math.ceil(e / 1e3);
                    if (n > 1)
                        for (var s = 0; s < n; s++) console.log(o + " countC", s), $scope.model.totalProcessSync++, t.limit(1e3), t.skip(1e3 * s), t.find({
                            success: function(e) {
                                for (var n = e.length - 1; n >= 0; n--) new Date(e[n].get("updatedAt").toString()).getTime() == c && e.splice(n, 1);
                                e.length > 0 ? $scope.findDataFromServerDone(e, o) : $scope.model.countProcessSync++
                            },
                            error: function(e, o) {
                                $scope.model.countProcessSync++
                            }
                        });
                    else console.log(o + " countC", 1), $scope.model.totalProcessSync++, t.limit(1e3), t.find({
                        success: function(e) {
                            for (var n = e.length - 1; n >= 0; n--) new Date(e[n].get("updatedAt").toString()).getTime() == c && e.splice(n, 1);
                            e.length > 0 ? $scope.findDataFromServerDone_2(e, o) : $scope.model.countProcessSync++
                        },
                        error: function(e, o) {
                            $scope.model.countProcessSync++
                        }
                    });
                    $scope.model.countProcessSync++
                },
                error: function(e) {
                    $scope.model.countProcessSync++
                }
            }), $scope.model.countProcessSync++
        }, function(e) {
            $scope.model.countProcessSync++
        })
    }, $scope.findDataFromServerDone = function(e, o) {
        e.forEach(function(e) {
            console.log(o + " findDataFromServerDone", 1), $scope.model.totalProcessSync++;
            var n = {
                idOnline: e.id
            };
            $DTA.selectTableWhere($scope.model.db, o, n).then(function(s) {
                if (s.rows.length > 0) {
                    console.log(o + " selectTableWhere", 1), $scope.model.totalProcessSync++;
                    var t = s.rows[0],
                        c = new Date(t.updated).getTime(),
                        i = new Date(e.get("updatedAt").toString()).getTime();
                    if (i > c) {
                        var a = {};
                        for (var l in e.attributes) "updatedAt" == l ? a.updated = e.attributes[l].toString() : "createdAt" == l ? a.created = e.attributes[l].toString() : a[l] = e.attributes[l];
                        a.isSync = !0, $DTA.updateTableLocal($scope.model.db, o, a, n).then(function(e) {
                            $scope.model.isSuccess = !1, $scope.model.countProcessSync++
                        }, function(e) {
                            console.log(e), $scope.model.countProcessSync++
                        })
                    } else $scope.model.countProcessSync++
                } else {
                    console.log(o + " selectTableWhere", 1), $scope.model.totalProcessSync++;
                    var r = {};
                    for (var l in e.attributes) "updatedAt" == l ? r.updated = e.attributes[l].toString() : "createdAt" == l ? r.created = e.attributes[l].toString() : r[l] = e.attributes[l];
                    r.isSync = !0, r.idOnline = e.id, $scope.model.isSyncToServer = !1, $DTA.insertDataToTable($scope.model.db, o, r).then(function(e) {
                        $scope.model.isSuccess = !1, $scope.model.countProcessSync++
                    }, function(e) {
                        console.log(e), $scope.model.countProcessSync++
                    })
                }
                $scope.model.countProcessSync++
            }, function(e) {
                $scope.model.countProcessSync++
            })
        }), $scope.model.countProcessSync++
    }, $scope.findDataFromServerDone_2 = function(e, o) {
        e.forEach(function(e) {
            console.log(o + " findDataFromServerDone_2", 1), $scope.model.totalProcessSync++;
            var n = {
                idOnline: e.id
            };
            $DTA.selectTableWhere($scope.model.db, o, n).then(function(s) {
                if (s.rows.length > 0) {
                    console.log(o + " selectTableWhere_2", 1), $scope.model.totalProcessSync++;
                    var t = s.rows[0],
                        c = new Date(t.updated).getTime(),
                        i = new Date(e.get("updatedAt").toString()).getTime();
                    if (i > c) {
                        var a = {};
                        for (var l in e.attributes) "updatedAt" == l ? a.updated = e.attributes[l].toString() : "createdAt" == l ? a.created = e.attributes[l].toString() : a[l] = e.attributes[l];
                        a.isSync = !0, $DTA.updateTableLocal($scope.model.db, o, a, n).then(function(e) {
                            $scope.model.isSuccess = !1, $scope.model.countProcessSync++
                        }, function(e) {
                            console.log(e), $scope.model.countProcessSync++
                        })
                    } else $scope.model.countProcessSync++
                } else {
                    console.log(o + " selectTableWhere_2", 1), $scope.model.totalProcessSync++;
                    var r = {};
                    for (var l in e.attributes) "updatedAt" == l ? r.updated = e.attributes[l].toString() : "createdAt" == l ? r.created = e.attributes[l].toString() : r[l] = e.attributes[l];
                    r.isSync = !0, r.idOnline = e.id, $scope.model.isSyncToServer = !1, $DTA.insertDataToTable($scope.model.db, o, r).then(function(e) {
                        $scope.model.isSuccess = !1, $scope.model.countProcessSync++
                    }, function(e) {
                        console.log(e), console.log(r.idOnline), $scope.model.countProcessSync++
                    })
                }
                $scope.model.countProcessSync++
            }, function(e) {
                $scope.model.countProcessSync++
            })
        }), $scope.model.countProcessSync++
    }, $scope.syncDataFromClientToServer = function(e, o) {
        console.log(o + " syncDataFromClientToServer", 1), $scope.model.totalProcessSync++;
        var n = {
            isSync: !1
        };
        $DTA.selectTableWhere($scope.model.db, o, n).then(function(e) {
            e.rows.length > 0 && _.each(e.rows, function(e) {
                if (console.log(o + " syncDataFromClientToServer selectTableWhere", 1), $scope.model.totalProcessSync++, $scope.model.isSuccess = !1, angular.isDefined(e.idOnline) && null != e.idOnline) {
                    var n = Parse.Object.extend(o),
                        s = new Parse.Query(n);
                    s.get(e.idOnline, {
                        success: function(n) {
                            $scope.model.isSuccess = !1;
                            for (var s in e) "isSync" != s && "created" != s && "updated" != s && "createdBy" != s && "deletedBy" != s && "isDeleted" != s && "idOnline" != s && n.set(s, e[s]);
                            n.save(null, {
                                success: function(n) {
                                    var s = {
                                        idOnline: e.idOnline
                                    };
                                    e.isSync = !0, e.updated = n.get("updatedAt").toString(), $DTA.updateTableLocal($scope.model.db, o, e, s), $scope.model.isSuccess = !1, $scope.model.countProcessSync++
                                },
                                error: function(e, o) {
                                    $scope.model.countProcessSync++
                                }
                            })
                        },
                        error: function(n, s) {
                            if (s.code == Parse.Error.OBJECT_NOT_FOUND) {
                                var t = {
                                    idOnline: e.idOnline
                                };
                                $DTA.deleteTableLocal($scope.model, o, t), $scope.model.isSuccess = !1
                            }
                            $scope.model.countProcessSync++
                        }
                    })
                } else {
                    var n = Parse.Object.extend(o),
                        s = new n,
                        t = {};
                    for (var c in e) "isSync" != c && "created" != c && "updated" != c && "idOnline" != c && (t[c] = e[c]);
                    $DTA.executeParse(s, "save", t).then(function(n) {
                        e.idOnline = n.id, e.isSync = !0, e.created = n.createdAt.toString(), e.updated = n.updatedAt.toString();
                        var s = {
                            idOffline: e.idOffline
                        };
                        $DTA.updateTableLocal($scope.model.db, o, e, s), $scope.model.countProcessSync++
                    }, function(e) {
                        $scope.model.countProcessSync++
                    })
                }
            }), $scope.model.countProcessSync++
        }, function(e) {
            $scope.model.countProcessSync++
        })
    }, $scope.loginSubmit = function(e) {
        if (1 == $scope.model.isResetPass) {
            if (e.username.indexOf("@") != -1) var o = {
                email: e.username
            };
            else var o = {
                username: angular.copy(e.username)
            };
            return void $DTA.selectTableWhere($scope.model.db, $tableName.Users, o).then(function(n) {
                if (n.rows.length > 0) {
                    $scope.model.currentUser = n.rows[0];
                    var s = {
                        password: angular.copy(e.password)
                    };
                    $DTA.updateTable($scope.model.db, $tableName.Users, s, o).then(function(o) {
                        e.username = "", e.password = "", $scope.model.isResetPass = 0
                    }, function(e) {})
                }
            }, function(e) {})
        }
        var o = {
            username: angular.copy(e.username),
            password: angular.copy(e.password)
        };
        $commonFunc.checkIsOnline().then(function(n) {
            n != Parse.Error.CONNECTION_FAILED ? ($scope.model.isOnline = !0, Parse.User.logIn(o.username, o.password, {
                success: function(n) {
                    $scope.syncUserToClient(o, n, function() {
                        $scope.model.isLoadDoExercise = !1, $scope.loginLocal(o, e), NProgress.start(), $scope.model.totalProcessSync = 0, $scope.model.countProcessSync = 0;
                        for (var s in $tableName) s != $tableName.Users && ($scope.syncDataFromServerToClient(n, s), $scope.syncDataFromClientToServer(n, s));
                        $scope.model.interval = setInterval(function() {
                            $scope.model.totalProcessSync === $scope.model.countProcessSync && (console.log("abc"), NProgress.done(), clearInterval($scope.model.interval), $scope.model.isLoadDoExercise = !0, $scope.loadDataFromDb($scope.model.db))
                        }, 2e3)
                    })
                },
                error: function(e, o) {
                    o.code == Parse.Error.OBJECT_NOT_FOUND && (angular.isUndefined($scope.showAlertLogin) && ($scope.showAlertLogin = function() {
                        var e = $ionicPopup.alert({
                            title: "Login",
                            template: o.message
                        });
                        e.then(function(e) {
                            $scope.showLogin()
                        })
                    }), $scope.showAlertLogin())
                }
            })) : $scope.loginLocal(o, e)
        }, function(e) {})
    }, $scope.showSigup = function() {
        angular.isDefined($scope.loginModal) && ($timeout(function() {
            $scope.model.username = null, $scope.model.password = null, angular.isDefined($scope.loginForm) && $scope.loginForm.$setUntouched()
        }, 100), $scope.loginModal.hide()), $scope.sigupModal ? $scope.sigupModal.show() : $ionicModal.fromTemplateUrl("./templates/sigup.html", function(e) {
            $scope.sigupModal = e, $scope.sigupModal.show()
        }, {
            scope: $scope,
            animation: "slide-in-up",
            focusFirstInput: !0,
            backdropClickToClose: !1,
            hardwareBackButtonClose: !1
        })
    }, $scope.sigupSubmit = function(e) {
        if ($scope.model.password == $scope.model.confirmPassword) {
            var o = (new Date).getTime().toString(),
                n = {
                    uid: _.uniqueId(o),
                    username: CryptoJS.SHA3(angular.copy(e.username), {
                        outputLength: 224
                    }).toString(),
                    password: CryptoJS.SHA3(angular.copy(e.password), {
                        outputLength: 224
                    }).toString(),
                    email: e.email,
                    isDeleted: "",
                    deletedBy: ""
                };
            $commonFunc.getNextIdOfTable($tableName.Users, function(o) {
                n.idOffline = o, $DTA.insertDataToTable($scope.model.db, $tableName.Users, n).then(function(o) {
                    var s = {
                        username: e.username,
                        password: e.password
                    };
                    localStorage.user = angular.toJson(s), $scope.initModel(), $scope.model.currentUser = n, $timeout(function() {
                        var e = {
                            name: "maxCountLearn",
                            value: "10",
                            deletedBy: "",
                            isDeleted: "",
                            createdBy: n.idOnline
                        };
                        $DTA.insertDataToTable($scope.model.db, $tableName.Configs, e).then(function(e) {
                            console.log("save configs", e)
                        }, function(e) {
                            console.log("save config err", e)
                        }), $DTA.selectTableAll(db, $tableName.Fibonacci).then(function(e) {
                            if (_.each(e.rows, function(e) {
                                    $scope.model.fibonacci.push(e)
                                }), 0 == e.rows.length) {
                                var o = {
                                    isDeleted: "",
                                    deletedBy: "",
                                    number: "1"
                                };
                                $DTA.insertDataToTable($scope.model.db, $tableName.Fibonacci, o), o = {
                                    isDeleted: "",
                                    deletedBy: "",
                                    number: "2"
                                }, $DTA.insertDataToTable($scope.model.db, $tableName.Fibonacci, o), o = {
                                    isDeleted: "",
                                    deletedBy: "",
                                    number: "3"
                                }, $DTA.insertDataToTable($scope.model.db, $tableName.Fibonacci, o)
                            }
                        }, function(e) {})
                    }), $scope.loadDataFromDb($scope.model.db), $scope.sigupModal.hide(), $scope.showSelectLanguage(), $commonFunc.setView("#/main")
                }, function(e) {
                    console.log(e)
                })
            })
        }
    }, $scope.logOut = function() {
        localStorage.user = null, $scope.showLogin(), $scope.popoverMenu.hide(), Parse.User.logOut()
    }, $scope.createTableNeeded = function(e) {
        $DTA.createTableNeeded(e)
    }, $scope.loadDataFromDb = function(db) {
        $DTA.selectTableAll(db, $tableName.Fibonacci).then(function(e) {
            _.each(e.rows, function(e) {
                $scope.model.fibonacci.push(e)
            })
        }, function(e) {});
        var whereConfig = {
            createdBy: $scope.model.currentUser.idOnline
        };
        $DTA.selectTableWhere(db, $tableName.Configs, whereConfig).then(function(result) {
            if (_.each(result.rows, function(item) {
                    eval("$scope.model." + item.name + " = " + item.value)
                }), $scope.getClasses(function(e) {
                    $scope.model.lessonListDo = [], e.forEach(function(e) {
                        $DTA.selectLessonsOfClasses(db, e.idOffline).then(function(e) {
                            _.each(e.rows, function(e) {
                                $scope.model.lessonListDo.push(e), $scope.model.isSuccessGetClass = !1
                            })
                        }, function(e) {})
                    })
                }), $scope.model.needExercisesCount = 0, 0 != $scope.model.isLoadDoExercise && (_.each($scope.model.lessonListDo, function(e) {
                    if (null != e.nextLearnDate && "" != e.nextLearnDate) {
                        var o = (new Date).toISOString();
                        o = o.substr(0, 10);
                        var n = new Date(e.nextLearnDate).toISOString();
                        n = n.substr(0, 10);
                        var s = new Date(o).getTime(),
                            t = new Date(n).getTime();
                        if (s >= t && e.countLearn < $scope.model.maxCountLearn) {
                            $scope.model.needExercisesCount++;
                            var c = {
                                    state: 2
                                },
                                i = {
                                    idOffline: e.idOffline
                                };
                            $DTA.updateTable($scope.model.db, $tableName.Lessons, c, i)
                        }
                    }
                }), $scope.model.needExercisesCount > 0)) {
                var sringNote = null;
                sringNote = 1 == $scope.model.needExercisesCount ? "There is " + $scope.model.needExercisesCount + " lesson need to do exercises" : "There are " + $scope.model.needExercisesCount + " lessons need to do exercises";
                try {
                    $cordovaLocalNotification.schedule({
                        idOffline: 1,
                        title: "Notification do exercises",
                        text: sringNote
                    })
                } catch (e) {
                    if (!Notification) return void alert("Desktop notifications not available in your browser. Try Chromium.");
                    "granted" !== Notification.permission ? Notification.requestPermission() : ($scope.model.notification = new Notification("Notification do exercises", {
                        icon: "./img/icon.png",
                        body: sringNote
                    }), $scope.model.notification.onclick = function() {
                        $scope.showDoExercisesNeedList(), $scope.model.notification.close(), $scope.model.notification = null
                    })
                }
            }
            $scope.model.languageItem = $scope.model.languageLearn.toString()
        }, function(e) {})
    }, $rootScope.$on("$cordovaLocalNotification:trigger", function(e, o, n) {
        $cordovaVibration.vibrate(1e3)
    }), $rootScope.$on("$cordovaLocalNotification:click", function(e, o, n) {
        $scope.showDoExercisesNeedList()
    }), $scope.showDoExercisesNeedList = function() {
        $scope.model.doExercisesNeedList = [], $timeout(function() {
            var e = {
                state: 2
            };
            $DTA.selectTableWhere($scope.model.db, $tableName.Lessons, e).then(function(e) {
                _.each(e.rows, function(e) {
                    $scope.model.doExercisesNeedList.push(e)
                })
            }, function(e) {})
        }), $commonFunc.setView("#/doExercisesNeedList")
    }, $scope.getLessonOfClass = function(e) {
        e.lessons = [];
        var o = {
            classId: e.idOffline
        };
        $DTA.selectTableWhere($scope.model.db, $tableName.ClassesLessons, o).then(function(o) {
            _.each(o.rows, function(o) {
                var n = {
                    idOffline: o.lessonId
                };
                $DTA.selectTableWhere($scope.model.db, $tableName.Lessons, n).then(function(o) {
                    e.lessons.push(o.rows[0])
                }, function(e) {})
            })
        }, function(e) {
            console.log(e)
        })
    }, $scope.getClasses = function(e) {
        if ($scope.model.classes = [], !angular.isUndefined($scope.model.languageLearn)) {
            var o = {
                userId: $scope.model.currentUser.idOffline,
                idLanguage: $scope.model.languageLearn.toString()
            };
            $DTA.selectTableWhere($scope.model.db, $tableName.Classes, o).then(function(o) {
                _.each(o.rows, function(e) {
                    $scope.model.classes.push(e)
                }), $scope.model.classList = _.map(o.rows, function(e) {
                    return e = {
                        idOffline: e.idOffline,
                        name: e.name,
                        vocabulary: [],
                        lessons: []
                    }
                }), (e || angular.noop)($scope.model.classes)
            }, function(e) {})
        }
    }, $scope.defineExitApp = function() {
        $scope.doubleClick = !1, $ionicPlatform.registerBackButtonAction(function(e) {
            $scope.back(), $scope.$digest()
        }, 100)
    }, $scope.back = function() {
        $scope.model.view == $scope.model.mainView ? (0 == $scope.doubleClick ? ($scope.doubleClick = !0, $cordovaToast.show("Press again to exit", "short", "bottom")) : navigator.app && navigator.app.exitApp() || device && device.exitApp(), $timeout(function() {
            $scope.doubleClick = !1
        }, 500)) : "#/wordListLearn" === $scope.model.view ? (angular.isUndefined($scope.showConfirm) && ($scope.showConfirm = function() {
            var e = $ionicPopup.confirm({
                title: "Leave your lesson",
                template: "Are you sure?"
            });
            e.then(function(e) {
                e && $scope.backView()
            })
        }), $scope.showConfirm()) : $scope.backView()
    }, $scope.backView = function() {
        var e = $scope.model.viewList.lastIndexOf($scope.model.view);
        $scope.model.view = $scope.model.viewList[e - 1], $window.location = $scope.model.view, $scope.model.viewList.pop()
    }, $scope.showHome = function() {
        $ionicSideMenuDelegate.toggleLeft(), $commonFunc.setView("#/main"), $scope.model.viewList = ["#/main"]
    }, $scope.toggleLeft = function() {
        $ionicSideMenuDelegate.toggleLeft()
    }, $scope.toggleGroup = function(e) {
        event.stopPropagation(), $scope.isGroupShown(e) ? $scope.shownGroup = null : ($scope.shownGroup = e, $scope.getLessonOfClass(e)), $scope.model.currentClass = e
    }, $scope.isGroupShown = function(e) {
        return $scope.shownGroup === e
    }, $scope.chooseClass = function(e) {
        $ionicSideMenuDelegate.toggleLeft(), $commonFunc.setView("#/classContent"), $scope.model.currentClass = e
    }, $scope.initloginForm = function(e) {
        $timeout(function() {
            $scope.loginForm = e.loginForm
        }, 100)
    }, $scope.initSigupForm = function(e) {
        $timeout(function() {
            $scope.sigupForm = e.sigupForm
        }, 100)
    }, $scope.showActionSheetWordListLearn = function(e) {
        $scope.popoverModeTravel ? $scope.popoverModeTravel.show(e) : $ionicPopover.fromTemplateUrl("./templates/actionSheetWordListLearn.html", {
            scope: $scope
        }).then(function(o) {
            $scope.popoverModeTravel = o, $scope.popoverModeTravel.show(e)
        })
    }, $scope.showPopoverMenu = function(e) {
        $scope.popoverMenu ? $scope.popoverMenu.show(e) : $ionicPopover.fromTemplateUrl("./templates/popoverMenu.html", {
            scope: $scope
        }).then(function(o) {
            $scope.popoverMenu = o, $scope.popoverMenu.show(e)
        })
    }, $scope.reload = function() {
        $commonFunc.setView("#/main"), location.reload()
    }, $scope.exit = function() {
        $scope.popoverMenu.hide(), navigator.app && navigator.app.exitApp() || device && device.exitApp()
    }, $scope.showSetting = function() {
        $scope.popoverMenu.hide(), $commonFunc.setView("#/setting")
    }, $scope.showPopupExport = function() {
        var e = "Export words";
        $ionicPopup.prompt({
            title: e,
            inputType: "text",
            inputPlaceholder: "Enter name"
        }).then(function(e) {
            angular.isUndefined(e) || null == e || "" == e || $scope["export"](e)
        })
    }, $scope["export"] = function(e) {
        var o = "";
        $scope.model.currentClass.vocabulary.forEach(function(e) {
            var n = e.english.split("(");
            o += n[0] + "| " + (angular.isDefined(n[1]) ? n[1].replace(")", "| ") : "| ") + e.vietnamese + "|" + e.example + "\n"
        }), $cordovaFile.writeFile($scope.model.rootDirectory, e + ".txt", o, !0).then(function(e) {
            angular.isUndefined($scope.showAlertExportComplete) && ($scope.showAlertExportComplete = function() {
                var e = $ionicPopup.alert({
                    title: "Export",
                    template: "Export complete"
                });
                e.then(function(e) {})
            }), $scope.showAlertExportComplete()
        }, function(e) {
            // download file
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(o));
            element.setAttribute('download', 'filename');

            element.style.display = 'none';
            document.body.appendChild(element);

            element.click();

            document.body.removeChild(element);
        })
    }, $scope.showProfile = function() {
        $commonFunc.setView("#/profile")
    }, $scope.chooseLesson = function(e, o) {
        $scope.model.currentLesson = e, $commonFunc.getWordsOfLesson(), $commonFunc.setView("#/mainLesson"), o || $ionicSideMenuDelegate.toggleLeft()
    }, $scope.selectRemoveClass = function(e) {
        event.stopPropagation(), angular.isUndefined($scope.showConfirmRemoveClass) && ($scope.showConfirmRemoveClass = function(e) {
            var o = $ionicPopup.confirm({
                title: "Warnig",
                template: "Are you sure want to remove this class?"
            });
            o.then(function(o) {
                o && ($scope.model.loading.show(), $commonFunc.removeClass(e, !0), $commonFunc.setView("#/main"))
            })
        }), $scope.showConfirmRemoveClass(e)
    }, $scope.showPopupAddClass = function(e) {
        angular.isDefined($scope.actionSheetClass) && $scope.actionSheetClass.hide();
        var o = "Add class";
        angular.isDefined(e) && 1 == e && (o = "Rename class"), $ionicPopup.prompt({
            title: o,
            inputType: "text",
            inputPlaceholder: "Enter new class"
        }).then(function(o) {
            if (!angular.isUndefined(o) && null != o && "" != o) {
                if (angular.isDefined(e) && 1 == e) {
                    var n = {
                            name: o
                        },
                        s = {
                            idOffline: $scope.model.currentClass.idOffline
                        };
                    return $DTA.updateTable($scope.model.db, $tableName.Classes, n, s).then(function(e) {
                        $scope.getClasses()
                    }, function(e) {}), void($scope.model.currentClass.name = o)
                }
                angular.isUndefined($scope.addClass) && ($scope.addClass = function(e) {
                    $commonFunc.getNextIdOfTable($tableName.Classes, function(o) {
                        var n = {
                            createdBy: $scope.model.currentUser.idOffline,
                            userId: $scope.model.currentUser.idOffline,
                            idOffline: o,
                            name: e,
                            isDeleted: "",
                            deletedBy: "",
                            idLanguage: $scope.model.languageLearn.toString()
                        };
                        $DTA.insertDataToTable($scope.model.db, $tableName.Classes, n);
                        var s = {
                            idOffline: o,
                            name: e,
                            vocabulary: [],
                            lessons: []
                        };
                        $scope.model.classList.push(s), $scope.model.classes.push(n)
                    })
                }), $scope.addClass(o)
            }
        })
    }, $scope.showActionClass = function(e) {
        $scope.actionSheetClass ? $scope.actionSheetClass.show(e) : $ionicPopover.fromTemplateUrl("./templates/actionSheetClass.html", {
            scope: $scope
        }).then(function(o) {
            $scope.actionSheetClass = o, $scope.actionSheetClass.show(e)
        })
    }, $scope.showExsercise = function() {
        $ionicSideMenuDelegate.toggleLeft(), $scope.showDoExercisesNeedList(), angular.isDefined($scope.actionSheetClass) && $scope.actionSheetClass.hide()
    }, $ionicPlatform.ready(function() {
        $scope.init()
    })
}]);
